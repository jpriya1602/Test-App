// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Test_App.shared;

namespace Test_App.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220208044807_Answer")]
    partial class Answer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Test_App.answers.entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EditedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Test_App.answers.entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<string>("CommentText")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WrittenById")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("WrittenById");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Test_App.question.entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("PostedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PostedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("QuestionPosted")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostedById");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Test_App.user.entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("AccountCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("AnswerId1")
                        .HasColumnType("integer");

                    b.Property<int?>("AnswerId2")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmailId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("AnswerId1");

                    b.HasIndex("AnswerId2");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Test_App.answers.entities.Answer", b =>
                {
                    b.HasOne("Test_App.user.entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Test_App.question.entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.Navigation("Author");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Test_App.answers.entities.Comment", b =>
                {
                    b.HasOne("Test_App.answers.entities.Answer", "Answer")
                        .WithMany("Comments")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Test_App.user.entities.User", "WrittenBy")
                        .WithMany()
                        .HasForeignKey("WrittenById");

                    b.Navigation("Answer");

                    b.Navigation("WrittenBy");
                });

            modelBuilder.Entity("Test_App.question.entities.Question", b =>
                {
                    b.HasOne("Test_App.user.entities.User", "PostedBy")
                        .WithMany()
                        .HasForeignKey("PostedById");

                    b.Navigation("PostedBy");
                });

            modelBuilder.Entity("Test_App.user.entities.User", b =>
                {
                    b.HasOne("Test_App.answers.entities.Answer", null)
                        .WithMany("DislikedUsers")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Test_App.answers.entities.Answer", null)
                        .WithMany("LikedUsers")
                        .HasForeignKey("AnswerId1");

                    b.HasOne("Test_App.answers.entities.Answer", null)
                        .WithMany("ViewedUsers")
                        .HasForeignKey("AnswerId2");
                });

            modelBuilder.Entity("Test_App.answers.entities.Answer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DislikedUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("ViewedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
